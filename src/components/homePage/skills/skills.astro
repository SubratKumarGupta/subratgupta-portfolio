---
import DemoThreejs from "./threejs/demoThreejs.astro";
---

<div class="skills">
  <div
    class="text-5xl mobile:text-4xl mobile:h-[30vh] h-[50vh] flex flex-col justify-center"
  >
    <div class="ml-12 mobile:ml-4 text-primary-teal">
      {"${"}<span class="text-white">What can i do</span>{"}"}
    </div>
  </div>
  <div class="h-[100vh]">
    <DemoThreejs />
  </div>
  <div class="h-[100vh] relative">
    <canvas id="dottodot-backround" class="h-full w-full absolute"> </canvas>

    <canvas id="dottodot" class="h-full w-full absolute"></canvas>
  </div>
</div>
<script>
  import gsap from "gsap";
  class Circle {
    canvas: HTMLCanvasElement;
    context: CanvasRenderingContext2D;
    x: number;
    y: number;
    outerRadius: number;
    innerRadius: number;
    color: string;
    id: [number, number];
    lineWidth: number;
    lineColor: string;
    timeline: gsap.core.Timeline;
    animateToRadius: number;
    constructor(
      canvas: HTMLCanvasElement,
      x: number,
      y: number,
      animateToRadius: number,
      outerRadius: number,
      innerRadius: number,
      color: string,
      lineWidth = 1,
      lineColor = "black"
    ) {
      (this.animateToRadius = animateToRadius), (this.canvas = canvas);
      this.context = canvas.getContext("2d")!;
      this.x = x;
      this.y = y;
      this.id = [x, y];
      this.outerRadius = outerRadius;
      this.innerRadius = innerRadius;
      this.color = color;
      this.lineWidth = lineWidth;
      this.lineColor = lineColor;
      this.draw();
      this.timeline = gsap.timeline({
        repeat: -1,
        // repeatRefresh: true,
        // onStart: () => {
        //   this.context.clearRect(
        //     this.x - animateToRadius - this.lineWidth,
        //     this.y - animateToRadius - this.lineWidth,
        //     animateToRadius * 2 + this.lineWidth * 2,
        //     animateToRadius * 2 + this.lineWidth * 2
        //   );
        // },
        onUpdate: () => {
          this.context.clearRect(
            this.x - animateToRadius - this.lineWidth,
            this.y - animateToRadius - this.lineWidth,
            animateToRadius * 2 + this.lineWidth * 2,
            animateToRadius * 2 + this.lineWidth * 2
          );
          this.draw();
        },
        // onComplete: () => {
        //   this.context.clearRect(
        //     this.x - animateToRadius - this.lineWidth,
        //     this.y - animateToRadius - this.lineWidth,
        //     animateToRadius * 2 + this.lineWidth * 2,
        //     animateToRadius * 2 + this.lineWidth * 2
        //   );
        // },
      });
      this.animate(animateToRadius);
    }
    private animate(to: number) {
      this.timeline
        .to(this, {
          duration: 3,
          outerRadius: (75 / 100) * to,

          yoyo: true,
        })
        .to(this, {
          duration: 1.5,
          outerRadius: to,
          innerRadius: to,
          lineWidth: 0,
        });
    }
    draw() {
      this.context.beginPath();
      this.context.arc(this.x, this.y, this.outerRadius, 0, 2 * Math.PI);
      this.context.fillStyle = this.color;
      this.context.fill();
      this.context.lineWidth = this.lineWidth;
      this.context.strokeStyle = this.lineColor;
      this.context.closePath();

      this.context.stroke();
      this.context.beginPath();
      this.context.arc(this.x, this.y, this.innerRadius, 0, 2 * Math.PI, true);
      this.context.fillStyle = this.lineColor;
      this.context.fill();
      this.context.closePath();
    }
  }

  const canvas = document.getElementById("dottodot") as HTMLCanvasElement;
  canvas.width = canvas.clientWidth;
  canvas.height = canvas.clientHeight;
  function drawCircleGrid(
    canvas: HTMLCanvasElement,
    spacing: number,
    outerRadius: number,
    innerRadius: number,
    color: string,
    lineWidth: number,
    lineColor: string
  ) {
    const numCols = Math.floor(canvas.width / spacing);
    const numRows = Math.floor(canvas.height / spacing);

    for (let i = 0; i < numRows; i++) {
      for (let j = 0; j < numCols; j++) {
        const x = (j + 0.5) * spacing;
        const y = (i + 0.5) * spacing;
        new Circle(
          canvas,
          x,
          y,
          Math.random() * 10,
          outerRadius,
          innerRadius,
          color,
          lineWidth,
          lineColor
        );
      }
    }
  }
  window.addEventListener("resize", () => {
    canvas.width = canvas.clientWidth;
    canvas.height = canvas.clientHeight;
    drawCircleGrid(canvas, 60, 0, 0, "#3fd4d4", 10, "rgb(14 18 18)");
  });
  drawCircleGrid(canvas, 60, 0, 0, "#3fd4d4", 10, "rgb(14 18 18)");
</script>
<script></script>
